// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  password      String?
  image         String?
  role          UserRole  @default(USER)
  accounts      Account[]
  sessions      Session[]
  reviews       Review[]
  ratings       Rating[]
  orders        Order[]
  cart          Cart?
  wishlist      Wishlist?
  addresses     Address[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model PasswordResetToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

enum UserRole {
  USER
  ADMIN
}

model Category {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  name        String    @unique
  description String?
  products    Product[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Product {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  description String
  price       Float
  images      String[]
  stock       Int
  sizes       String[]
  colors      String[]
  featured    Boolean  @default(false)

  categoryId String   @db.ObjectId
  category   Category @relation(fields: [categoryId], references: [id])

  reviews     Review[]
  ratings     Rating[]
  cartItems   CartItem[]
  wishlistItems WishlistItem[]
  orderItems  OrderItem[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Review {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  title     String
  comment   String
  
  product   Product @relation(fields: [productId], references: [id])
  productId String @db.ObjectId
  
  user      User @relation(fields: [userId], references: [id])
  userId    String @db.ObjectId

  rating    Rating?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([productId, userId])
}

model Rating {
  id        String @id @default(auto()) @map("_id") @db.ObjectId
  value     Int
  
  product   Product @relation(fields: [productId], references: [id])
  productId String @db.ObjectId
  
  user      User @relation(fields: [userId], references: [id])
  userId    String @db.ObjectId
  
  review    Review @relation(fields: [reviewId], references: [id])
  reviewId  String @unique @db.ObjectId

  createdAt DateTime @default(now())
  
  @@unique([productId, userId])
}

model Cart {
  id      String     @id @default(auto()) @map("_id") @db.ObjectId
  user    User       @relation(fields: [userId], references: [id])
  userId  String     @unique @db.ObjectId
  items   CartItem[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model CartItem {
  id        String  @id @default(auto()) @map("_id") @db.ObjectId
  cart      Cart    @relation(fields: [cartId], references: [id], onDelete: Cascade)
  cartId    String  @db.ObjectId
  product   Product @relation(fields: [productId], references: [id])
  productId String  @db.ObjectId
  quantity  Int

  createdAt DateTime @default(now())

  @@unique([cartId, productId])
}

model Wishlist {
  id      String     @id @default(auto()) @map("_id") @db.ObjectId
  user    User       @relation(fields: [userId], references: [id])
  userId  String     @unique @db.ObjectId
  items   WishlistItem[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model WishlistItem {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  wishlist    Wishlist @relation(fields: [wishlistId], references: [id], onDelete: Cascade)
  wishlistId  String   @db.ObjectId
  product     Product  @relation(fields: [productId], references: [id])
  productId   String   @db.ObjectId

  createdAt DateTime @default(now())

  @@unique([wishlistId, productId])
}

model Order {
  id          String        @id @default(auto()) @map("_id") @db.ObjectId
  user        User          @relation(fields: [userId], references: [id])
  userId      String        @db.ObjectId
  items       OrderItem[]
  totalAmount Float
  status      OrderStatus
  paymentMethod String? // e.g., 'razorpay', 'cod'
  paymentStatus PaymentStatus
  paymentId   String?       @unique // from payment provider
  
  shippingAddress   Address? @relation(fields: [shippingAddressId], references: [id])
  shippingAddressId String? @db.ObjectId
  
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
}

model OrderItem {
  id        String  @id @default(auto()) @map("_id") @db.ObjectId
  order     Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)
  orderId   String  @db.ObjectId
  product   Product @relation(fields: [productId], references: [id])
  productId String  @db.ObjectId
  quantity  Int
  price     Float   // Price at time of order

  @@unique([orderId, productId])
}

model Address {
  id          String @id @default(auto()) @map("_id") @db.ObjectId
  street      String
  city        String
  state       String
  postalCode  String
  country     String
  isDefault   Boolean @default(false)
  
  user        User @relation(fields: [userId], references: [id])
  userId      String @db.ObjectId

  orders      Order[]

  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

enum OrderStatus {
  PENDING
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELLED
}

enum PaymentStatus {
  PENDING
  PAID
  FAILED
}
