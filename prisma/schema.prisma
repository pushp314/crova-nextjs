
datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id              String    @id @default(cuid())
  name            String?
  email           String?   @unique
  emailVerified   DateTime?
  password        String?
  image           String?
  role            UserRole  @default(USER)
  accounts        Account[]
  sessions        Session[]
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  cart            Cart?
  wishlist        Wishlist?
  orders          Order[]
  reviews         Review[]
  ratings         Rating[]
  addresses       Address[]
}

model VerificationToken {
  id         String   @id @default(cuid())
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model PasswordResetToken {
  id         String   @id @default(cuid())
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

enum UserRole {
  USER
  ADMIN
}

model Product {
  id          String   @id @default(cuid())
  name        String
  description String
  price       Float
  images      String[]
  stock       Int
  categoryId  String
  sizes       String[]
  colors      String[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  category   Category    @relation(fields: [categoryId], references: [id])
  cartItems  CartItem[]
  wishlistItems WishlistItem[]
  orderItems OrderItem[]
  reviews    Review[]
  ratings    Rating[]
}

model Category {
  id          String    @id @default(cuid())
  name        String    @unique
  description String?
  products    Product[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Cart {
  id        String     @id @default(cuid())
  userId    String     @unique
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  user      User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  items     CartItem[]
}

model CartItem {
  id        String   @id @default(cuid())
  cartId    String
  productId String
  quantity  Int
  createdAt DateTime @default(now())
  cart      Cart     @relation(fields: [cartId], references: [id], onDelete: Cascade)
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@unique([cartId, productId])
}

model Wishlist {
    id String @id @default(cuid())
    userId String @unique
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    user User @relation(fields: [userId], references: [id], onDelete: Cascade)
    items WishlistItem[]
}

model WishlistItem {
    id String @id @default(cuid())
    wishlistId String
    productId String
    createdAt DateTime @default(now())
    wishlist Wishlist @relation(fields: [wishlistId], references: [id], onDelete: Cascade)
    product Product @relation(fields: [productId], references: [id], onDelete: Cascade)

    @@unique([wishlistId, productId])
}

model Order {
  id                String      @id @default(cuid())
  userId            String
  totalAmount       Float
  status            OrderStatus @default(PENDING)
  paymentMethod     String?
  paymentStatus     PaymentStatus @default(PENDING)
  paymentId         String?
  shippingAddressId String?
  createdAt         DateTime    @default(now())
  updatedAt         DateTime    @updatedAt

  user    User      @relation(fields: [userId], references: [id])
  items   OrderItem[]
  shippingAddress Address? @relation(fields: [shippingAddressId], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model OrderItem {
  id        String   @id @default(cuid())
  orderId   String
  productId String
  quantity  Int
  price     Float // Price at the time of purchase
  createdAt DateTime @default(now())

  order   Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product Product @relation(fields: [productId], references: [id], onDelete: Restrict)
}

enum OrderStatus {
  PENDING
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELLED
}

enum PaymentStatus {
  PENDING
  PAID
  FAILED
}

model Review {
  id        String   @id @default(cuid())
  title     String
  comment   String
  productId String
  userId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  product Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  user    User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  rating  Rating?
  
  @@unique([productId, userId])
}

model Rating {
  id        String  @id @default(cuid())
  value     Int
  productId String
  userId    String
  reviewId  String? @unique
  createdAt DateTime @default(now())
  
  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  review  Review? @relation(fields: [reviewId], references: [id])

  @@unique([productId, userId])
}

model Address {
    id String @id @default(cuid())
    userId String
    street String
    city String
    state String
    postalCode String
    country String
    isDefault Boolean @default(false)
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    
    user User @relation(fields: [userId], references: [id], onDelete: Cascade)
    orders Order[]
}
