
// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

enum UserRole {
  USER
  ADMIN
}

model User {
  id               String                 @id @default(cuid())
  name             String?
  email            String?                @unique
  emailVerified    DateTime?
  image            String?
  password         String?
  role             UserRole               @default(USER)
  createdAt        DateTime               @default(now())
  updatedAt        DateTime               @updatedAt
  accounts         Account[]
  sessions         Session[]
  orders           Order[]
  reviews          Review[]
  ratings          Rating[]
  addresses        Address[]
  cart             Cart?
  wishlist         Wishlist?
  resetTokens      PasswordResetToken[]
  verificationTokens VerificationToken[]
}

model VerificationToken {
  id         String   @id @default(cuid())
  identifier String
  token      String   @unique
  expires    DateTime
  userId     String
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([identifier, token])
}

model PasswordResetToken {
  id         String   @id @default(cuid())
  identifier String
  token      String   @unique
  expires    DateTime
  userId     String
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([identifier, token])
}

model Category {
  id          String    @id @default(cuid())
  name        String    @unique
  description String?
  products    Product[]
}

model Product {
  id          String      @id @default(cuid())
  name        String
  description String      @db.Text
  price       Float
  images      String[]
  stock       Int
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  category    Category    @relation(fields: [categoryId], references: [id])
  categoryId  String
  sizes       String[]
  colors      String[]
  featured    Boolean     @default(false)
  reviews     Review[]
  ratings     Rating[]
  orderItems  OrderItem[]
  cartItems   CartItem[]
  wishlistItems WishlistItem[]
}

model Review {
  id        String   @id @default(cuid())
  title     String
  comment   String   @db.Text
  createdAt DateTime @default(now())
  product   Product  @relation(fields: [productId], references: [id])
  productId String
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  rating    Rating?
}

model Rating {
  id        String   @id @default(cuid())
  value     Int
  createdAt DateTime @default(now())
  product   Product  @relation(fields: [productId], references: [id])
  productId String
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  review    Review   @relation(fields: [reviewId], references: [id])
  reviewId  String   @unique
}

enum OrderStatus {
  PENDING
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELLED
}

enum PaymentStatus {
  PENDING
  PAID
  FAILED
}

model Order {
  id                String        @id @default(cuid())
  totalAmount       Float
  status            OrderStatus   @default(PENDING)
  createdAt         DateTime      @default(now())
  updatedAt         DateTime      @updatedAt
  user              User          @relation(fields: [userId], references: [id])
  userId            String
  items             OrderItem[]
  paymentMethod     String?       // e.g., 'razorpay', 'cod'
  paymentStatus     PaymentStatus @default(PENDING)
  paymentId         String?       // Store Razorpay order ID or transaction ID
  shippingAddress   Address?      @relation(fields: [shippingAddressId], references: [id])
  shippingAddressId String?
}

model OrderItem {
  id        String   @id @default(cuid())
  quantity  Int
  price     Float // Price at the time of purchase
  order     Order    @relation(fields: [orderId], references: [id])
  orderId   String
  product   Product  @relation(fields: [productId], references: [id])
  productId String
}

model Address {
  id          String  @id @default(cuid())
  street      String
  city        String
  state       String
  postalCode  String
  country     String
  isDefault   Boolean @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  user        User    @relation(fields: [userId], references: [id])
  userId      String
  orders      Order[]
}

model Cart {
  id        String     @id @default(cuid())
  user      User       @relation(fields: [userId], references: [id])
  userId    String     @unique
  items     CartItem[]
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
}

model CartItem {
  id        String   @id @default(cuid())
  cart      Cart     @relation(fields: [cartId], references: [id])
  cartId    String
  product   Product  @relation(fields: [productId], references: [id])
  productId String
  quantity  Int
  createdAt DateTime @default(now())

  @@unique([cartId, productId])
}

model Wishlist {
  id        String         @id @default(cuid())
  user      User           @relation(fields: [userId], references: [id])
  userId    String         @unique
  items     WishlistItem[]
  createdAt DateTime       @default(now())
  updatedAt DateTime       @updatedAt
}

model WishlistItem {
  id          String   @id @default(cuid())
  wishlist    Wishlist @relation(fields: [wishlistId], references: [id])
  wishlistId  String
  product     Product  @relation(fields: [productId], references: [id])
  productId   String
  createdAt   DateTime @default(now())

  @@unique([wishlistId, productId])
}
