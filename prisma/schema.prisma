// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider     = "postgresql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

generator client {
  provider = "prisma-client-js"
}

enum Role {
  USER
  ADMIN
}

enum OrderStatus {
  PENDING
  SHIPPED
  DELIVERED
  CANCELLED
}

// NextAuth.js Models

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// Application Models

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  role          Role      @default(USER)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  accounts  Account[]
  sessions  Session[]
  cart      Cart?
  wishlist  Wishlist?
  orders    Order[]
}

model Category {
  id          String    @id @default(cuid())
  name        String    @unique
  description String?
  products    Product[]
}

model Product {
  id          String    @id @default(cuid())
  name        String
  description String?
  price       Float
  images      String[]
  stock       Int       @default(0)
  createdAt   DateTime  @default(now())

  categoryId String
  category   Category @relation(fields: [categoryId], references: [id])

  cartItems     CartItem[]
  wishlistItems WishlistItem[]
  orderItems    OrderItem[]

  @@index([categoryId])
}

model Cart {
  id        String     @id @default(cuid())
  createdAt DateTime   @default(now())

  userId String @unique
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  items  CartItem[]

  @@index([userId])
}

model CartItem {
  id       String @id @default(cuid())
  quantity Int

  cartId    String
  cart      Cart   @relation(fields: [cartId], references: [id], onDelete: Cascade)

  productId String
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@unique([cartId, productId])
  @@index([cartId])
  @@index([productId])
}

model Wishlist {
  id        String         @id @default(cuid())
  createdAt DateTime       @default(now())

  userId String @unique
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  items  WishlistItem[]

  @@index([userId])
}

model WishlistItem {
  id String @id @default(cuid())

  wishlistId String
  wishlist   Wishlist @relation(fields: [wishlistId], references: [id], onDelete: Cascade)

  productId String
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@unique([wishlistId, productId])
  @@index([wishlistId])
  @@index([productId])
}

model Order {
  id          String      @id @default(cuid())
  totalAmount Float
  status      OrderStatus @default(PENDING)
  createdAt   DateTime    @default(now())

  userId String
  user   User   @relation(fields: [userId], references: [id])
  items  OrderItem[]

  @@index([userId])
}

model OrderItem {
  id       String @id @default(cuid())
  quantity Int
  price    Float // Price at the time of order

  orderId String
  order   Order  @relation(fields: [orderId], references: [id], onDelete: Cascade)

  productId String
  product   Product @relation(fields: [productId], references: [id])

  @@index([orderId])
  @@index([productId])
}
