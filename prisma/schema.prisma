// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  password      String?
  role          UserRole  @default(USER)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  accounts     Account[]
  sessions     Session[]
  cart         Cart?
  wishlist     Wishlist?
  orders       Order[]
  reviews      Review[]
  ratings      Rating[]
  addresses    Address[]
  resetTokens  PasswordResetToken[]
  verificationTokens VerificationToken[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  id         String   @id @default(cuid())
  identifier String
  token      String   @unique
  expires    DateTime
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId     String

  @@unique([identifier, token])
}

model PasswordResetToken {
  id         String   @id @default(cuid())
  identifier String
  token      String   @unique
  expires    DateTime
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId     String

  @@unique([identifier, token])
}

enum UserRole {
  USER
  ADMIN
}

model Category {
  id          String    @id @default(cuid())
  name        String    @unique
  description String?
  products    Product[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Product {
  id          String    @id @default(cuid())
  name        String
  description String    @db.Text
  price       Float
  images      String[]
  stock       Int
  sizes       String[]
  colors      String[]
  featured    Boolean   @default(false)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  categoryId String
  category   Category @relation(fields: [categoryId], references: [id])

  reviews    Review[]
  ratings    Rating[]
  cartItems  CartItem[]
  wishlistItems WishlistItem[]
  orderItems OrderItem[]
}

model Review {
  id        String   @id @default(cuid())
  title     String
  comment   String   @db.Text
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  productId String
  product   Product @relation(fields: [productId], references: [id])

  userId String
  user   User @relation(fields: [userId], references: [id])

  rating Rating?

  @@unique([productId, userId])
}

model Rating {
  id        String   @id @default(cuid())
  value     Int
  createdAt DateTime @default(now())

  productId String
  product   Product @relation(fields: [productId], references: [id])

  userId String
  user   User @relation(fields: [userId], references: [id])

  reviewId String @unique
  review   Review @relation(fields: [reviewId], references: [id])

  @@unique([productId, userId, reviewId])
}

model Cart {
  id        String     @id @default(cuid())
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  items     CartItem[]

  userId String @unique
  user   User   @relation(fields: [userId], references: [id])
}

model CartItem {
  id        String   @id @default(cuid())
  quantity  Int
  createdAt DateTime @default(now())

  cartId    String
  cart      Cart   @relation(fields: [cartId], references: [id])
  productId String
  product   Product @relation(fields: [productId], references: [id])

  @@unique([cartId, productId])
}

model Wishlist {
  id        String         @id @default(cuid())
  createdAt DateTime       @default(now())
  updatedAt DateTime       @updatedAt
  items     WishlistItem[]

  userId String @unique
  user   User   @relation(fields: [userId], references: [id])
}

model WishlistItem {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())

  wishlistId String
  wishlist   Wishlist @relation(fields: [wishlistId], references: [id])
  productId  String
  product    Product  @relation(fields: [productId], references: [id])

  @@unique([wishlistId, productId])
}

model Order {
  id          String      @id @default(cuid())
  totalAmount Float
  status      OrderStatus @default(PENDING)
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  paymentMethod   String?
  paymentStatus   PaymentStatus @default(PENDING)
  paymentId       String?       @unique

  userId String
  user   User   @relation(fields: [userId], references: [id])

  items OrderItem[]

  shippingAddressId String?
  shippingAddress   Address? @relation(fields: [shippingAddressId], references: [id])
}

model OrderItem {
  id        String   @id @default(cuid())
  quantity  Int
  price     Float // Price at the time of purchase
  createdAt DateTime @default(now())

  orderId   String
  order     Order   @relation(fields: [orderId], references: [id])
  productId String
  product   Product @relation(fields: [productId], references: [id])
}

model Address {
  id          String  @id @default(cuid())
  street      String
  city        String
  state       String
  postalCode  String
  country     String
  isDefault   Boolean @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  userId String
  user   User   @relation(fields: [userId], references: [id])

  orders Order[]
}

enum OrderStatus {
  PENDING
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELLED
}

enum PaymentStatus {
  PENDING
  PAID
  FAILED
}
